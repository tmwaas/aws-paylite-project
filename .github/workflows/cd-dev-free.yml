name: CD (dev-free)
on:
  workflow_dispatch:
  push:
    tags: ['v*']

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX || 'tmw' }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get AWS Account ID
        id: sts
        run: |
          echo "account=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT
      - name: Fetch instance id
        id: inst
        run: echo "iid=${{ secrets.EC2_INSTANCE_ID }}" >> $GITHUB_OUTPUT
      - name: Generate compose (ECR images)
        id: gen
        env:
          REGISTRY: ${{ steps.sts.outputs.account }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          cat > docker-compose.yml <<'YAML'
          version: "3.8"
          services:
            payments-v1:
              image: ${REGISTRY}/${ECR_PREFIX}/payments-api:latest
              ports: ["8080:8080"]
              environment:
                SERVICE_NAME: payments-api
                OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
            payments-v2:
              image: ${REGISTRY}/${ECR_PREFIX}/payments-api:latest
              ports: ["18080:8080"]
              environment:
                SERVICE_NAME: payments-api
                OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
            risk-scorer:
              image: ${REGISTRY}/${ECR_PREFIX}/risk-scorer:latest
              ports: ["8081:8081"]
              environment:
                SERVICE_NAME: risk-scorer
                OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
            otel-collector:
              image: otel/opentelemetry-collector:0.105.0
              command: ["--config=/etc/otel-collector-config.yaml"]
              volumes:
                - /opt/observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
              network_mode: host
            prometheus:
              image: prom/prometheus:latest
              volumes:
                - /opt/observability/prometheus.yml:/etc/prometheus/prometheus.yml
              ports: ["9090:9090"]
            grafana:
              image: grafana/grafana:latest
              ports: ["3000:3000"]
              volumes:
                - /opt/observability/grafana/provisioning:/etc/grafana/provisioning
          YAML
      - name: Deploy via SSM
        env:
          REGISTRY: ${{ steps.sts.outputs.account }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          aws ssm send-command             --instance-ids "${{ steps.inst.outputs.iid }}"             --document-name "AWS-RunShellScript"             --comment "Deploy dev-free stack from ECR"             --parameters commands='[
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin '${REGISTRY}'",
              "mkdir -p /opt/observability",
              "cat > /home/ubuntu/docker-compose.yml <<EOF",
              "$(cat docker-compose.yml)",
              "EOF",
              "sudo mv /home/ubuntu/docker-compose.yml /opt/docker-compose.yml",
              "sudo mkdir -p /etc/nginx",
              "sudo bash -lc "cat > /etc/nginx/nginx.conf <<EONGINX"",
              "$(cat infra/nginx/nginx.conf)",
              "EONGINX",
              "sudo bash -lc "cat > /opt/observability/otel-collector-config.yaml <<EOOTEL"",
              "$(cat infra/observability/otel-collector-config.yaml)",
              "EOOTEL",
              "sudo bash -lc "cat > /opt/observability/prometheus.yml <<EOPROM"",
              "$(cat infra/observability/prometheus.yml)",
              "EOPROM",
              "sudo mkdir -p /opt/observability/grafana/provisioning/datasources /opt/observability/grafana/provisioning/dashboards",
              "sudo bash -lc "cat > /opt/observability/grafana/provisioning/datasources/datasource.yaml <<EOGRAF"",
              "$(cat infra/observability/grafana/provisioning/datasources/datasource.yaml)",
              "EOGRAF",
              "sudo bash -lc "cat > /opt/observability/grafana/provisioning/dashboards/dashboard.json <<EODSH"",
              "$(cat infra/observability/grafana/provisioning/dashboards/dashboard.json)",
              "EODSH",
              "sudo docker compose -f /opt/docker-compose.yml up -d",
              "sudo apt-get install -y nginx || true",
              "sudo systemctl enable nginx && sudo systemctl start nginx",
              "sudo nginx -s reload"
            ]'             --output text
